secrets	NO_KP
of	NO_KP
the	NO_KP
glasgow	BEGIN_KP
haskell	INSIDE_KP
compiler	INSIDE_KP
inliner	INSIDE_KP
higher-order	INSIDE_KP
languages	INSIDE_KP
such	NO_KP
as	NO_KP
haskell	BEGIN_KP
encourage	NO_KP
the	NO_KP
programmer	NO_KP
to	NO_KP
build	NO_KP
abstractions	BEGIN_KP
by	NO_KP
composing	NO_KP
functions.	NO_KP
a	NO_KP
good	NO_KP
compiler	BEGIN_KP
must	NO_KP
inline	NO_KP
many	NO_KP
of	NO_KP
these	NO_KP
calls	NO_KP
to	NO_KP
recover	NO_KP
an	NO_KP
efficiently	NO_KP
executable	BEGIN_KP
program.	NO_KP
in	NO_KP
principle,	NO_KP
inlining	NO_KP
is	NO_KP
dead	NO_KP
simple:	NO_KP
just	NO_KP
replace	NO_KP
the	NO_KP
call	NO_KP
of	NO_KP
a	NO_KP
function	NO_KP
by	NO_KP
an	NO_KP
instance	NO_KP
of	NO_KP
its	NO_KP
body.	NO_KP
but	NO_KP
any	NO_KP
compiler-writer	NO_KP
will	NO_KP
tell	NO_KP
you	NO_KP
that	NO_KP
inlining	NO_KP
is	NO_KP
a	NO_KP
black	NO_KP
art,	NO_KP
full	NO_KP
of	NO_KP
delicate	NO_KP
compromises	NO_KP
that	NO_KP
work	NO_KP
together	NO_KP
to	NO_KP
give	NO_KP
good	NO_KP
performance	BEGIN_KP
without	NO_KP
unnecessary	NO_KP
code	NO_KP
bloat.	NO_KP
the	NO_KP
purpose	NO_KP
of	NO_KP
this	NO_KP
paper	NO_KP
is,	NO_KP
therefore,	NO_KP
to	NO_KP
articulate	NO_KP
the	NO_KP
key	NO_KP
lessons	NO_KP
we	NO_KP
learned	NO_KP
from	NO_KP
a	NO_KP
full-scale	NO_KP
"production"	NO_KP
inliner,	NO_KP
the	NO_KP
one	NO_KP
used	NO_KP
in	NO_KP
the	NO_KP
glasgow	BEGIN_KP
haskell	INSIDE_KP
compiler.	NO_KP
we	NO_KP
focus	NO_KP
mainly	NO_KP
on	NO_KP
the	NO_KP
algorithmic	BEGIN_KP
aspects,	NO_KP
but	NO_KP
we	NO_KP
also	NO_KP
provide	NO_KP
some	NO_KP
indicative	NO_KP
measurements	NO_KP
to	NO_KP
substantiate	NO_KP
the	NO_KP
importance	NO_KP
of	NO_KP
various	NO_KP
aspects	BEGIN_KP
of	NO_KP
the	NO_KP
inliner	BEGIN_KP
