fc++:	NO_KP
functional	BEGIN_KP
tools	NO_KP
for	NO_KP
object-oriented	BEGIN_KP
tasks	NO_KP
fc++	BEGIN_KP
is	NO_KP
a	NO_KP
library	BEGIN_KP
for	NO_KP
programming	BEGIN_KP
functionally	NO_KP
in	NO_KP
c++.	NO_KP
compared	NO_KP
to	NO_KP
other	NO_KP
c++	BEGIN_KP
functional	INSIDE_KP
programming	INSIDE_KP
libraries,	NO_KP
fc++	BEGIN_KP
is	NO_KP
distinguished	NO_KP
by	NO_KP
its	NO_KP
powerful	NO_KP
type	NO_KP
system	NO_KP
which	NO_KP
allows	NO_KP
the	NO_KP
manipulation	NO_KP
of	NO_KP
parametrically	NO_KP
polymorphic	NO_KP
functions	NO_KP
(e.g.,	NO_KP
passing	NO_KP
them	NO_KP
as	NO_KP
arguments	NO_KP
to	NO_KP
other	NO_KP
functions	NO_KP
and	NO_KP
returning	NO_KP
them	NO_KP
as	NO_KP
results).	NO_KP
in	NO_KP
this	NO_KP
paper,	NO_KP
we	NO_KP
show	NO_KP
how	NO_KP
fc++	BEGIN_KP
can	NO_KP
be	NO_KP
used	NO_KP
in	NO_KP
common	NO_KP
object-oriented	BEGIN_KP
programming	INSIDE_KP
tasks.	NO_KP
we	NO_KP
demonstrate	NO_KP
fc++	BEGIN_KP
implementations	NO_KP
of	NO_KP
several	NO_KP
common	NO_KP
design	NO_KP
patterns	NO_KP
(adapter,	NO_KP
builder,	NO_KP
command,	NO_KP
and	NO_KP
more).	NO_KP
compared	NO_KP
to	NO_KP
conventional	NO_KP
c++	BEGIN_KP
implementations	NO_KP
of	NO_KP
these	NO_KP
patterns,	NO_KP
our	NO_KP
implementations	NO_KP
are	NO_KP
either	NO_KP
simpler	NO_KP
(in	NO_KP
that	NO_KP
fewer	NO_KP
classes/dependencies	NO_KP
are	NO_KP
needed),	NO_KP
more	NO_KP
efficient,	NO_KP
or	NO_KP
more	NO_KP
type-safe	NO_KP
(thanks	NO_KP
to	NO_KP
parametric	BEGIN_KP
polymorphism	INSIDE_KP
and	NO_KP
type	NO_KP
inference)	NO_KP
