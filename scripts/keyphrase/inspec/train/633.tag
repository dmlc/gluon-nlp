using	NO_KP
k-nearest-neighbor	BEGIN_KP
classification	INSIDE_KP
in	NO_KP
the	NO_KP
leaves	BEGIN_KP
of	NO_KP
a	NO_KP
tree	BEGIN_KP
we	NO_KP
construct	NO_KP
a	NO_KP
hybrid	BEGIN_KP
(composite)	NO_KP
classifier	NO_KP
by	NO_KP
combining	NO_KP
two	NO_KP
classifiers	NO_KP
in	NO_KP
common	NO_KP
use	NO_KP
-	NO_KP
classification	BEGIN_KP
trees	INSIDE_KP
and	NO_KP
k-nearest-neighbor	BEGIN_KP
(k-nn).	NO_KP
in	NO_KP
our	NO_KP
scheme	NO_KP
we	NO_KP
divide	NO_KP
the	NO_KP
feature	BEGIN_KP
space	INSIDE_KP
up	NO_KP
by	NO_KP
a	NO_KP
classification	BEGIN_KP
tree,	NO_KP
and	NO_KP
then	NO_KP
classify	NO_KP
test	NO_KP
set	NO_KP
items	NO_KP
using	NO_KP
the	NO_KP
k-nn	BEGIN_KP
rule	INSIDE_KP
just	NO_KP
among	NO_KP
those	NO_KP
training	NO_KP
items	NO_KP
in	NO_KP
the	NO_KP
same	NO_KP
leaf	NO_KP
as	NO_KP
the	NO_KP
test	NO_KP
item.	NO_KP
this	NO_KP
reduces	NO_KP
somewhat	NO_KP
the	NO_KP
computational	BEGIN_KP
load	INSIDE_KP
associated	NO_KP
with	NO_KP
k-nn,	NO_KP
and	NO_KP
it	NO_KP
produces	NO_KP
a	NO_KP
classification	BEGIN_KP
rule	INSIDE_KP
that	NO_KP
performs	NO_KP
better	NO_KP
than	NO_KP
either	NO_KP
trees	BEGIN_KP
or	NO_KP
the	NO_KP
usual	NO_KP
k-nn	BEGIN_KP
in	NO_KP
a	NO_KP
number	NO_KP
of	NO_KP
well-known	NO_KP
data	BEGIN_KP
sets	INSIDE_KP
