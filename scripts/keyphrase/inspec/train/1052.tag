developing	NO_KP
a	NO_KP
high-performance	BEGIN_KP
web	INSIDE_KP
server	INSIDE_KP
in	NO_KP
concurrent	BEGIN_KP
haskell	INSIDE_KP
server	INSIDE_KP
applications,	NO_KP
and	NO_KP
in	NO_KP
particular	NO_KP
network-based	BEGIN_KP
server	INSIDE_KP
applications,	NO_KP
place	NO_KP
a	NO_KP
unique	NO_KP
combination	NO_KP
of	NO_KP
demands	NO_KP
on	NO_KP
a	NO_KP
programming	NO_KP
language:	NO_KP
lightweight	BEGIN_KP
concurrency,	NO_KP
high	BEGIN_KP
i/o	INSIDE_KP
throughput,	NO_KP
and	NO_KP
fault	BEGIN_KP
tolerance	INSIDE_KP
are	NO_KP
all	NO_KP
important.	NO_KP
this	NO_KP
paper	NO_KP
describes	NO_KP
a	NO_KP
prototype	NO_KP
web	BEGIN_KP
server	INSIDE_KP
written	NO_KP
in	NO_KP
concurrent	BEGIN_KP
haskell	INSIDE_KP
(with	NO_KP
extensions),	NO_KP
and	NO_KP
presents	NO_KP
two	NO_KP
useful	NO_KP
results:	NO_KP
firstly,	NO_KP
a	NO_KP
conforming	BEGIN_KP
server	INSIDE_KP
could	NO_KP
be	NO_KP
written	NO_KP
with	NO_KP
minimal	NO_KP
effort,	NO_KP
leading	NO_KP
to	NO_KP
an	NO_KP
implementation	NO_KP
in	NO_KP
less	NO_KP
than	NO_KP
1500	NO_KP
lines	NO_KP
of	NO_KP
code,	NO_KP
and	NO_KP
secondly	NO_KP
the	NO_KP
naive	NO_KP
implementation	NO_KP
produced	NO_KP
reasonable	NO_KP
performance.	NO_KP
furthermore,	NO_KP
making	NO_KP
minor	NO_KP
modifications	NO_KP
to	NO_KP
a	NO_KP
few	NO_KP
time-critical	BEGIN_KP
components	INSIDE_KP
improved	NO_KP
performance	NO_KP
to	NO_KP
a	NO_KP
level	NO_KP
acceptable	NO_KP
for	NO_KP
anything	NO_KP
but	NO_KP
the	NO_KP
most	NO_KP
heavily	NO_KP
loaded	NO_KP
web	BEGIN_KP
servers	NO_KP
