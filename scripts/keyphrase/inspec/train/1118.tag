run-time	INSIDE_KP
data-flow	INSIDE_KP
analysis	INSIDE_KP
parallelizing	INSIDE_KP
compilers	INSIDE_KP
have	NO_KP
made	NO_KP
great	NO_KP
progress	NO_KP
in	NO_KP
recent	NO_KP
years.	NO_KP
however,	NO_KP
there	NO_KP
still	NO_KP
remains	NO_KP
a	NO_KP
gap	NO_KP
between	NO_KP
the	NO_KP
current	NO_KP
ability	NO_KP
of	NO_KP
parallelizing	BEGIN_KP
compilers	INSIDE_KP
and	NO_KP
their	NO_KP
final	NO_KP
goals.	NO_KP
in	NO_KP
order	NO_KP
to	NO_KP
achieve	NO_KP
the	NO_KP
maximum	NO_KP
parallelism,	NO_KP
run-time	BEGIN_KP
techniques	NO_KP
were	NO_KP
used	NO_KP
in	NO_KP
parallelizing	BEGIN_KP
compilers	INSIDE_KP
during	NO_KP
last	NO_KP
few	NO_KP
years.	NO_KP
first,	NO_KP
this	NO_KP
paper	NO_KP
presents	NO_KP
a	NO_KP
basic	NO_KP
run-time	BEGIN_KP
privatization	INSIDE_KP
method.	NO_KP
the	NO_KP
definition	NO_KP
of	NO_KP
run-time	BEGIN_KP
dead	INSIDE_KP
code	INSIDE_KP
is	NO_KP
given	NO_KP
and	NO_KP
its	NO_KP
side	NO_KP
effect	NO_KP
is	NO_KP
discussed.	NO_KP
to	NO_KP
eliminate	NO_KP
the	NO_KP
imprecision	NO_KP
caused	NO_KP
by	NO_KP
the	NO_KP
run-time	BEGIN_KP
dead	INSIDE_KP
code,	NO_KP
backward	BEGIN_KP
data-flow	INSIDE_KP
information	INSIDE_KP
must	NO_KP
be	NO_KP
used.	NO_KP
proteus	BEGIN_KP
test,	NO_KP
which	NO_KP
can	NO_KP
use	NO_KP
backward	BEGIN_KP
information	INSIDE_KP
in	NO_KP
run-time,	NO_KP
is	NO_KP
then	NO_KP
presented	NO_KP
to	NO_KP
exploit	NO_KP
more	NO_KP
dynamic	BEGIN_KP
parallelism.	NO_KP
also,	NO_KP
a	NO_KP
variation	NO_KP
of	NO_KP
proteus	BEGIN_KP
test,	NO_KP
the	NO_KP
advanced	NO_KP
proteus	BEGIN_KP
test,	NO_KP
is	NO_KP
offered	NO_KP
to	NO_KP
achieve	NO_KP
partial	NO_KP
parallelism.	NO_KP
proteus	BEGIN_KP
test	INSIDE_KP
was	NO_KP
implemented	NO_KP
on	NO_KP
the	NO_KP
parallelizing	BEGIN_KP
compiler	NO_KP
aft.	NO_KP
in	NO_KP
the	NO_KP
end	NO_KP
of	NO_KP
this	NO_KP
paper	NO_KP
the	NO_KP
program	NO_KP
fpppp.f	NO_KP
of	NO_KP
spec95fp	NO_KP
benchmark	NO_KP
is	NO_KP
taken	NO_KP
as	NO_KP
an	NO_KP
example,	NO_KP
to	NO_KP
show	NO_KP
the	NO_KP
effectiveness	NO_KP
of	NO_KP
proteus	BEGIN_KP
test	INSIDE_KP
