parallel	INSIDE_KP
and	NO_KP
distributed	BEGIN_KP
haskells	NO_KP
parallel	BEGIN_KP
and	NO_KP
distributed	BEGIN_KP
languages	INSIDE_KP
specify	NO_KP
computations	NO_KP
on	NO_KP
multiple	BEGIN_KP
processors	INSIDE_KP
and	NO_KP
have	NO_KP
a	NO_KP
computation	BEGIN_KP
language	INSIDE_KP
to	NO_KP
describe	NO_KP
the	NO_KP
algorithm,	NO_KP
i.e.	NO_KP
what	NO_KP
to	NO_KP
compute,	NO_KP
and	NO_KP
a	NO_KP
coordination	BEGIN_KP
language	INSIDE_KP
to	NO_KP
describe	NO_KP
how	NO_KP
to	NO_KP
organise	NO_KP
the	NO_KP
computations	NO_KP
across	NO_KP
the	NO_KP
processors.	NO_KP
haskell	BEGIN_KP
has	NO_KP
been	NO_KP
used	NO_KP
as	NO_KP
the	NO_KP
computation	BEGIN_KP
language	INSIDE_KP
for	NO_KP
a	NO_KP
wide	NO_KP
variety	NO_KP
of	NO_KP
parallel	BEGIN_KP
and	NO_KP
distributed	BEGIN_KP
languages,	NO_KP
and	NO_KP
this	NO_KP
paper	NO_KP
is	NO_KP
a	NO_KP
comprehensive	NO_KP
survey	NO_KP
of	NO_KP
implemented	NO_KP
languages.	NO_KP
it	NO_KP
outlines	NO_KP
parallel	BEGIN_KP
and	NO_KP
distributed	BEGIN_KP
language	INSIDE_KP
concepts	NO_KP
and	NO_KP
classifies	NO_KP
haskell	BEGIN_KP
extensions	NO_KP
using	NO_KP
them.	NO_KP
similar	NO_KP
example	NO_KP
programs	NO_KP
are	NO_KP
used	NO_KP
to	NO_KP
illustrate	NO_KP
and	NO_KP
contrast	NO_KP
the	NO_KP
coordination	BEGIN_KP
languages,	NO_KP
and	NO_KP
the	NO_KP
comparison	NO_KP
is	NO_KP
facilitated	NO_KP
by	NO_KP
the	NO_KP
common	NO_KP
computation	BEGIN_KP
language.	NO_KP
a	NO_KP
lazy	BEGIN_KP
language	INSIDE_KP
is	NO_KP
not	NO_KP
an	NO_KP
obvious	NO_KP
choice	NO_KP
for	NO_KP
parallel	BEGIN_KP
or	NO_KP
distributed	BEGIN_KP
computation,	NO_KP
and	NO_KP
we	NO_KP
address	NO_KP
the	NO_KP
question	NO_KP
of	NO_KP
why	NO_KP
haskell	BEGIN_KP
is	NO_KP
a	NO_KP
common	NO_KP
functional	BEGIN_KP
computation	INSIDE_KP
language	INSIDE_KP
